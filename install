#!/bin/bash
#!/system/bin/bash 

set import busybox
set import bash

script_version='1.2.035';
engine_version="1.0.3 Lapato"

# Define variables
red='\033[1;91m'; deep_green='\033[0;32m'; green='\033[1;92m'; yellow='\033[1;93m'; blue='\033[1;94m'; white='\033[1;97m'; stop='\e[0m';
scripts=~/.scripts/;
file=extras.zip; # extra packages 
engine=.engine.bash; # the engine modified 
loc=~/EchoMinal/; # default clone location
sysAdmin=.SysAdmin.bash; # the sysadmin script 

# shell-setting [in test]
user_name=~/.config/echominal/user_name.cfg;
pc_name=~/.config/echominal/pc_name.cfg;
shell_style=~/.config/echominal/shell_style.cfg;


# logs
log=~/.log/system-status.log;

offline_installation() {

	# step 1 (creating log files and folder & locating $file)
    echo -e "\e[1m\e[32m==> \e[97mSearching for files...\e[0m";
    echo -e "\e[1m\e[32m==> \e[97mPreparing for installation...\e[0m";
    printf "\e[1m\e[34m  -> \e[97mCreating files & folder 	  : \e[0m";
    if cd $HOME; mkdir ~/.log && touch ~/.log/system-status.log;
    	then sleep 0.5 && printf "Done\n";
		else sleep 0.5 && printf "$red"; printf "Failed to create files & folder\n"; fi
	if cd $HOME; mkdir ~/.config; then sleep 0;
	else printf "$red"; printf "Failed config(dir)\n"; fi;
	if cd $HOME; mkdir ~/.scripts; then sleep 0;
	else printf "$red"; printf "Failed scripts(dir)\n"; fi;
	printf "\e[1m\e[34m  -> \e[97mLocating installation script : \e[0m";
	if cd $loc && find $file >> $log; 
		then sleep 0.5 && printf "Found\n";
		else sleep 0.5 && printf "$red"; printf "Not Found\n"; fi
	
	# step 2 (clonning files)
	printf "\e[1m\e[34m  -> \e[97mCopying files                : \e[0m";
	if cd $loc; cp -rfv $file $engine $HOME >> $log;
			# loc=~/echominal/; # default clone location
			# file=extras.zip; # extra packages 
			# engine=~/.engine.bash; # the engine modified 
		then sleep 0.5 && printf "Done\n";
		else sleep 0.5 && printf "$red"; printf "Failed to copy\n"; fi

	# step 3 (unpacking archives)
	printf "\e[1m\e[34m  -> \e[97mUnpacking archivers          : \e[0m";
	if cd $HOME; unzip $file; then sleep 0.5
		else sleep 0.5 && printf "$red"; printf "Failed to unpack $file\n"; fi

    # step 4 (deleting archives)
	printf "\e[1m\e[34m  -> \e[97mDeleting archivers           : \e[0m";
	if cd $HOME; rm -rfv $file >> $log; 
		then sleep 0.5 && printf "Done\n";
		else sleep 0.5 && printf "$red"; printf "Failed to delete $file\n"; fi
}
online_installation() {
	echo && echo -e "$red\e[7m";
	printf "|--------------NOTE-------------|\n| this installation is going to |\n| need internet connection on   |\n| your android device. Otherwise|\n| you'll missing some of package|\n|-------------------------------|\n"; printf "\e[0m";

	# checking for updates and upgrades 
    echo -e "\e[1m\e[32m==> \e[97mUpdating Database......\e[0m";
    printf "\e[1m\e[34m  -> \e[97mChecking for updates....\e[0m\n";
    if apt update; then pkg upgrade; fi;

    # installing packages 
    echo -e "\e[1m\e[32m==> \e[97mInstalling Packages......\e[0m";
    printf "\e[1m\e[34m  -> \e[97mInstalling Packages Set 1 ....\e[0m\n";
    pkg install figlet screenfetch cmatrix sl tree python python2 htop git zip unzip rsync zsh fish
    printf "\e[1m\e[34m  -> \e[97mInstalling Packages Set 2 ....\e[0m\n";
    pkg install termux-api p7zip root-repo; 
}
function footer() { 
	printf "$deep_green" && printf "EchoMinal$yellow $engine_version\n$stop"
	printf "$deep_green" && printf "Installation Script$yellow $script_version$stop\n$deep_green";
	printf "Created by$red Farhan Sadik$stop\n$deep_green";
    printf "Square Development Group\n"; printf "\n$stop" && exit 0; 

}
function input_settings() {
    printf "\n$deep_green" && printf "Please enter your short name\n$stop\n";
    read -p "enter user name    : " user && echo $user > $user_name;
    read -p "enter pc/host name : " pc && echo $pc > $pc_name;
    
    printf "\n$deep_green" && printf "Please select your style. This is how it should look like. \n \n";
    printf "$yellow" && printf "[1] Arch Linux Style $stop
    [$red`cat $user_name`$white@$blue`cat $pc_name`$white ~] $ \n";
    printf "$yellow" && printf "[2] Parrot Linux Style  $stop
    ┌─[$red`cat $user_name`$white@$blue`cat $pc_name`$white]─[~]
    └─➤ \n";
    printf "$yellow" && printf "[3] Fish Shell Style  $stop
    $red`cat $user_name`$white@$blue`cat $pc_name`$white ~> \n";
    printf "$yellow" && printf "[4] Marato Style $stop
    » $red`cat $user_name`$white@$blue`cat $pc_name`$white╺─╸[~] \n"
    printf "$yellow" && printf "[*] Default Style $stop
    $red`cat $user_name`$white@$blue`cat $pc_name`$white $ \n";

    printf "\n$deep_green" && printf "Please select a style, 1-3. enter to default.\n$stop";
    read -p "echominal $ " style; printf "\n$red";

    if [[ $style == 1 ]]; then {
        echo "Installing ......"; sleep 0.5;
        if echo "[`cat $user_name`@`cat $pc_name` ~] $ " > $shell_style; then {
            echo "Install Compleated";
        }; fi; 
    }; elif [[ $style == 2 ]]; then {
        echo "Installing ......"; sleep 0.5;
        echo "┌─[`cat $user_name`@`cat $pc_name`]─[~]
└─➤ " > $shell_style; echo "Install Compleated";
    }; elif [[ $style == 3 ]]; then {
        echo "Installing ......"; sleep 0.5; echo "`cat $user_name`@`cat $pc_name` ~> " > $shell_style; echo "Install Compleated";
    }; elif [[ $style == 4 ]]; then {
        echo "Installing ......"; sleep 0.5; echo "» `cat $user_name`@`cat $pc_name`╺─╸[~] " > $shell_style; echo "Install Compleated";
    }; else {
        echo "Installing ......"; sleep 0.5; echo "Default Style Installing"; sleep 0.5; echo "`cat $user_name`@`cat $pc_name` $ " > $shell_style; echo "Install Compleated";
    }; fi && printf "\n$stop";
}
clear && printf "$red"; printf "Script Version$yellow $script_version $red\n";
printf "Engine ~$deep_green Echominal$yellow $engine_version $stop";
echo  "
______________________
< Installing EchoMinal >
---------------------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )--
                ||----w | 
                ||     ||";

printf "\n$red" && printf "Installing EchoMinal\n";
printf "$white" && echo -e "Loading Installation Script"; sleep 1
printf "$white" && echo -e "\e[5mPlease Wait.....\e[0m"; sleep 1

if sleep 0.5; then 
		online_installation;
		offline_installation;
		input_settings;
		if cd $HOME; then chmod +x $engine; fi;
else 
	footer; fi;

# a script by farhan sadik
# square development group
