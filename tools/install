#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/bash

script_version='1.6.04';       # pre - 1.3.09
engine_version="2.0 Batasu";   # pre - 1.0.7 Marato

# Define variables
red='\033[1;91m'; deep_green='\033[0;32m'; green='\033[1;92m'; yellow='\033[1;93m'; blue='\033[1;94m'; white='\033[1;97m'; stop='\e[0m';

def_loc=~/.config/echominal;							# default clone location
log=~/.config/echominal/log/system_installation.log;
bin_file=/data/data/com.termux/files/usr/bin;
desire_location=/data/data/com.termux/files/home/.config/echominal/echominal;

# shell-setting
username=~/.config/echominal/username;
shell_style=~/.config/echominal/shell_style.cfg;

function base() {
	# required storage permission 
	mkdir -p /sdcard/MP3 
	mkdir -p /sdcard/termux-backup
	mkdir -p $HOME/.config/echominal/log
	mkdir -p $HOME/.config/echominal/scripts
	
	# setup termux color theme
	cp -r $def_loc/.termux $HOME
	echo "Termux font set to default"
	# bash $HOME/.termux/fonts.sh 
	echo "Termux color scheme set to default"
	# bash $HOME/.termux/colors.sh 
	
	echo "looking for echominal base script"
	if [[ `ls -a $def_loc/echominal | grep $desire_location` == $desire_location  ]] ; then {
		echo "found file"; 
		echo "getting base permissions"
		if chmod +x $desire_location; then {
			# copy
			cp -rfv $desire_location $bin_file
		} fi

	} else {
		printf "$red"; printf "sorry no base file has been found\n$stop"; 
	} fi
	
}

function package_installation() {

	# checking for updates and upgrades
	if pkg update; then pkg upgrade; fi;

	# installing packages
	pkg install figlet cowsay htop zsh tar ranger termux-tools termux-api ffmpeg python python2 nodejs-lts

	# installing pip package
	pip install youtube-dl

}

function ccli_setup() {
	printf "$deep_green\n" && printf "Installing CCLi$yellow\n";

	echo "  ____ ____ _     _ "
 	echo " / ___/ ___| |   (_)"
	echo "| |  | |   | |   | |"
	echo "| |__| |___| |___| |"
 	echo " \____\____|_____|_|"
 	printf "\n$yellow"

 	if printf "Installing Configuration : $red"; then {
		if cat ~/.config/echominal/termux.cfg >> ~/.bashrc; then {
			printf "CCLi for bash installed$yellow\n";
			printf "Updating source file     : $red"; if source ~/.bashrc; then printf "Done$yellow\n"; fi
		} fi
	
        #printf "Installing Configuration : $red";
		#if cat ~/.config/echominal/termux.cfg >> ~/.zshrc; then {
		#	printf "CCLi for ZSH installed$yellow\n";
			# skiped 
		#	printf "Updating source file     : $red"; if source ~/.zshrc; then printf "Done$stop\n"; fi
		#} fi
	} fi

	#source ~/.bashrc
	#source ~/.zshrc

}

function input_settings() {
    printf "\n$deep_green" && printf "Please enter your username \n$stop\n";
    read -p "enter user name    : " user && echo $user > $username;
    hostname=`hostname`; # no hostname will be provided

    printf "\n$deep_green" && printf "Please select your style. This is how it should look like. \n \n";
    printf "$yellow" && printf "[1] Arch Linux Style $stop
    [$red`cat $username`$white@$blue`hostname`$white ~] $ \n";
    printf "$yellow" && printf "[2] Parrot Linux Style  $stop
    ┌─[$red`cat $username`$white@$blue`hostname`$white]─[~]
    └─➤ \n";
    printf "$yellow" && printf "[3] Fish Shell Style  $stop
    $red`cat $username`$white@$blue`hostname`$white ~> \n";
    printf "$yellow" && printf "[4] Marato Style $stop
    » $red`cat $username`$white@$blue`hostname`$white╺─╸[~] \n"
    printf "$yellow" && printf "[*] Default Style $stop
    $red`cat $username`$white@$blue`hostname`$white $ \n";

    printf "\n$deep_green" && printf "Please select a style, 1-3. enter to default.\n$stop";
    read -p "echominal % " style; printf "\n$red";

    if [[ $style == 1 ]]; then {
        echo "Installing ......"; sleep 0.5;
        if echo "[`cat $username`@`hostname` ~] $ " > $shell_style; then {
            echo "Install Compleated";
        }; fi;
    }; elif [[ $style == 2 ]]; then {
        echo "Installing ......"; sleep 0.5;
        echo "┌─[`cat $username`@`hostname`]─[~]
└─➤ " > $shell_style; echo "Install Compleated";
    }; elif [[ $style == 3 ]]; then {
        echo "Installing ......"; sleep 0.5; echo "`cat $username`@`hostname` ~> " > $shell_style; echo "Install Compleated";
    }; elif [[ $style == 4 ]]; then {
        echo "Installing ......"; sleep 0.5; echo "» `cat $username`@`hostname`╺─╸[~] " > $shell_style; echo "Install Compleated";
    }; else {
        echo "Installing ......"; sleep 0.5; echo "Default Style Installing"; sleep 0.5; echo "`cat $username`@`hostname` $ " > $shell_style; echo "Install Compleated";
    }; fi && printf "\n$stop";
}

function termux_ohmyzsh() {
	# cloning git (termux-ohmyzsh)
	git clone https://github.com/Cabbagec/termux-ohmyzsh.git "$HOME/termux-ohmyzsh" --depth 1

	# moving-file
	mv "$HOME/.termux" "$HOME/.termux.bak.$(date +%Y.%m.%d-%H:%M:%S)"
	cp -R "$HOME/termux-ohmyzsh/.termux" "$HOME/.termux"

	# cloning git (oh-my-zsh)
	git clone git://github.com/robbyrussell/oh-my-zsh.git "$HOME/.oh-my-zsh" --depth 1

	# moving/copying-file
	mv "$HOME/.zshrc" "$HOME/.zshrc.bak.$(date +%Y.%m.%d-%H:%M:%S)"
	cp "$HOME/.oh-my-zsh/templates/zshrc.zsh-template" "$HOME/.zshrc"

	# setting
	sed -i '/^ZSH_THEME/d' "$HOME/.zshrc"
	sed -i '1iZSH_THEME="agnoster"' "$HOME/.zshrc"
	echo "alias chcolor='$HOME/.termux/colors.sh'" >> "$HOME/.zshrc"
	echo "alias chfont='$HOME/.termux/fonts.sh'" >> "$HOME/.zshrc"

	# cloning-git (zsh-syntax-highlighting)
	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.zsh-syntax-highlighting" --depth 1
	echo "source $HOME/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> "$HOME/.zshrc"
	chsh -s zsh # getting permissions
	echo "oh-my-zsh install complete!\nChoose your color scheme now~" && $HOME/.termux/colors.sh
	echo "Choose your font now~" && $HOME/.termux/fonts.sh
}

function termux_sudo() {
	read -p "are you rooted user? (y/n) " user
    if [[ $user == 'y' ]]; then {
        echo -e "  \e[5mInstalling Termux sudo\e[0m"
        printf "Cloning Git       : "
        if git clone https://gitlab.com/st42/termux-sudo.git; then printf "Done\n"; fi
        printf "Install a dependency needed for sudo\n"
        if cd termux-sudo; then apt install ncurses-utils; fi;
        printf "Execute the following commands to place sudo into the correct directory with the proper permissions and ownership\n";
        cat sudo > /data/data/com.termux/files/usr/bin/sudo
        chmod 700 /data/data/com.termux/files/usr/bin/sudo
    }; elif [[ $user == 'n' ]]; then {
        echo "you ar not rooted user";
        echo "This update is not for you";
    }; else {
      echo "Invlid Options"
    }; fi
}


# termux_ohmyzsh     	// skipped
# termux_sudo			// skipped  // pkg install root-repo

# checking internet connectivity 
if ping -q -c 1 -W 1 google.com >/dev/null; then {
	# echo "The network is up"
	package_installation
	base 
	ccli_setup
	input_settings
}
else echo "The network is down"; fi
termux-reload-settings; # reload settings 

# printf "$red\n" && echo "Please restart termux!"; printf "$stop\n";
printf "$deep_green" && printf "EchoMinal$yellow $engine_version\n$stop";
printf "$deep_green" && printf "Installation Script$yellow $script_version$stop\n$deep_green";
printf "\nCreated by$red Farhan Sadik$stop\n$deep_green";
printf "Square Development Group\n"; printf "\n$stop" && exit 0;


# a script by farhan sadik
# square development group
